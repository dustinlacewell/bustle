"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[376],{8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>i});var a=n(6540);const o={},c=a.createContext(o);function t(e){const s=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(c.Provider,{value:s},e.children)}},9211:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"stripping","title":"Using class_name","description":"If you set strip to true in bustle.json, you can use class_name to give your classes a name.","source":"@site/docs/stripping.md","sourceDirName":".","slug":"/stripping","permalink":"/docs/stripping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/stripping.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Gathering .import Files","permalink":"/docs/gather"},"next":{"title":"Workshop Commands","permalink":"/docs/workshop"}}');var o=n(4848),c=n(8453);const t={sidebar_position:7},i="Using class_name",r={},l=[{value:"Huh?",id:"huh",level:2},{value:"What can I do with <code>class_name</code>?",id:"what-can-i-do-with-class_name",level:2},{value:"How does Bustle help?",id:"how-does-bustle-help",level:2}];function d(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsxs)(s.h1,{id:"using-class_name",children:["Using ",(0,o.jsx)(s.code,{children:"class_name"})]})}),"\n",(0,o.jsxs)(s.p,{children:["If you set ",(0,o.jsx)(s.code,{children:"strip"})," to ",(0,o.jsx)(s.code,{children:"true"})," in ",(0,o.jsx)(s.code,{children:"bustle.json"}),", you can use ",(0,o.jsx)(s.code,{children:"class_name"})," to give your classes a name."]}),"\n",(0,o.jsx)(s.h2,{id:"huh",children:"Huh?"}),"\n",(0,o.jsxs)(s.p,{children:["One of the most significant limitations of the ModLoader / Godot 3.5 modding is that you cannot utilize ",(0,o.jsx)(s.code,{children:"class_name"})," to give your classes a name."]}),"\n",(0,o.jsx)(s.p,{children:"This makes mod code much more verbose and tedious to write."}),"\n",(0,o.jsxs)(s.p,{children:["Luckily, ",(0,o.jsx)(s.code,{children:"class_name"})," ",(0,o.jsx)(s.em,{children:"does"})," work during development. That means, as long as we remove it before we release, we can enjoy the benefits of things like type-annotations and IDE completions for our own classes. With ",(0,o.jsx)(s.code,{children:"strip"})," set to ",(0,o.jsx)(s.code,{children:"true"})," in ",(0,o.jsx)(s.code,{children:"bustle.json"}),", we can do just that."]}),"\n",(0,o.jsx)(s.p,{children:"If you want to know about how this works from a technical perspective, continue reading."}),"\n",(0,o.jsxs)(s.h2,{id:"what-can-i-do-with-class_name",children:["What can I do with ",(0,o.jsx)(s.code,{children:"class_name"}),"?"]}),"\n",(0,o.jsxs)(s.p,{children:["You can use ",(0,o.jsx)(s.code,{children:"class_name"})," to give your classes a name. At minimum, this let's you naturally refer to your classes."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"class_name SomeClass\n"})}),"\n",(0,o.jsx)(s.p,{children:"With that name, we can instantiate the class:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"var instance = SomeClass.new()\n"})}),"\n",(0,o.jsx)(s.p,{children:"We can specify that a variable is of a certain type:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"var instance: SomeClass\n"})}),"\n",(0,o.jsx)(s.p,{children:"Or that a function only works with a certain type:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"func some_function(arg: SomeClass):\n    pass\n"})}),"\n",(0,o.jsx)(s.p,{children:"We can check if a variable is of a certain type:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:'if instance is SomeClass:\n    print("yup!")\n'})}),"\n",(0,o.jsx)(s.p,{children:"We can call static functions on the class:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"SomeClass.some_static_function()\n"})}),"\n",(0,o.jsx)(s.p,{children:"And finally, we can access any local classes:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"var foo = SomeClass.InnerClass.new()\n"})}),"\n",(0,o.jsx)(s.p,{children:"Needless to say, you can do a lot with classes."}),"\n",(0,o.jsxs)(s.p,{children:["So what happens if you can't use ",(0,o.jsx)(s.code,{children:"class_name"}),"?"]}),"\n",(0,o.jsx)(s.p,{children:"Well, it sucks. But you can get by..."}),"\n",(0,o.jsx)(s.p,{children:"Firstly, you can't use type-annotations, so specifying the type of variables, or class fields just isn't possible."}),"\n",(0,o.jsx)(s.p,{children:"Then, to get ahold of a class, you need to load it from a script:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:'var SomeClass = load("res://SomeClass.gd")\n'})}),"\n",(0,o.jsx)(s.p,{children:"And you'll have to do that for every class in every file. It's actually a bit worse than this, but you get the idea."}),"\n",(0,o.jsx)(s.h2,{id:"how-does-bustle-help",children:"How does Bustle help?"}),"\n",(0,o.jsxs)(s.p,{children:["During release, Bustle will look at all of your GDScript files and create an index of any classes with a defined ",(0,o.jsx)(s.code,{children:"class_name"}),", remembering which file they originally came from."]}),"\n",(0,o.jsxs)(s.p,{children:["Then, it will process each file, removing any ",(0,o.jsx)(s.code,{children:"class_name"})," declarations and type-annotations, and adding the necessary ",(0,o.jsx)(s.code,{children:"load"})," statements to load the classes."]}),"\n",(0,o.jsx)(s.p,{children:"This allows any code that was using a named class to continue working."}),"\n",(0,o.jsx)(s.p,{children:"For example, before:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:'class_name Foo\n\nvar name: String\n\nfunc _init(name: String):\n    self.name = name\n\nfunc greet():\n  print("Hello, " + name)\n\nclass Bar:\n    static func uppercase(s: String):\n        return s.upper()\n'})}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:"func greet(who: String):\n   var name = Foo.Bar.uppercase(who)\n   var foo = Foo.new(name)\n   foo.greet()\n"})}),"\n",(0,o.jsx)(s.p,{children:"After:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-gdscript",children:'var FooWFEIJ = load("res://Foo.gd")\n\nfunc greet(who: String):\n   var name = FooWFEIJ.Bar.uppercase(who)\n   var foo = FooWFEIJ.new(name)\n   foo.greet()\n'})})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);